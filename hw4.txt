
1. Разобраться как использовать мультииндексные ключи в данном примере

import pandas as pd
import numpy as np

index = [
    ('city_1', 2010),
    ('city_1', 2020),
    ('city_2', 2010),
    ('city_2', 2020),
    ('city_3', 2010),
    ('city_3', 2020),
]

index = pd.MultiIndex.from_tuples(index)

population = [
    101,
    201,
    102,
    202,
    103,
    203,
]

pop = pd.Series(population, index = index)

pop_df = pd.DataFrame(
    {
        'total': pop,
        'something': [
            10,
            11,
            12,
            13,
            14,
            15,
        ]
    }
)

pop_df_1 = pop_df.loc['city_1', 'something']
pop_df_1 = pop_df.loc[['city_1', 'city_3'], ['total', 'something']]
pop_df_1 = pop_df.loc[['city_1', 'city_3'], 'something']




2. Из получившихся данных выбрать данные по

index = pd.MultiIndex.from_product(
    [
        ['city_1', 'city_2'],
        [2010, 2020]
    ],
    names = ['city', 'year'],
)


columns = pd.MultiIndex.from_product(
    [
        ['person_1', 'person_2', 'person_3'],
        ['job_1', 'job_2']
    ],
    names=['worker', 'job']
)

rng = np.random.default_rng(1)

data = rng.random((4, 6))

data_df = pd.DataFrame(data, index=index, columns=columns)
print(data_df)

# - 2020 году (для всех столбцов)

data_2020 = data_df.xs(2020, axis=0, level='year')
print(data_2020)

# - job_1 (для всех строк)

data_j1 = data_df.xs('job_1', axis=1, level='job')
print(data_j1)

# - для city_1 и job_2 

data_c1_j2 = data_df.loc['city_1'].xs('job_2', axis=1, level='job')
print(data_c1_j2)




3. Взять за основу DataFrame со следующей структурой

index = pd.MultiIndex.from_product(
    [
        ['city_1', 'city_2'],
        [2010, 2020]
    ],
    names=['city', 'year']
)
columns = pd.MultiIndex.from_product(
    [
        ['person_1', 'person_2', 'person_3'],
        ['job_1', 'job_2']
    ],
    names=['worker', 'job']
)

rng = np.random.default_rng(1)

data = rng.random((4, 6))

data_df = pd.DataFrame(data, index=index, columns=columns)
print(data_df)

# Выполнить запрос на получение следующих данных
# - все данные по person_1 и person_3

data_persons_1_3 = data_df.loc[:, ['person_1', 'person_3']]
print(data_persons_1_3)

# - все данные по первому городу и первым двум person-ам (с использование срезов)

data_c1_p12 = data_df.iloc[:2, :4]
print(data_c1_p12)

# Приведите пример (самостоятельно) с использованием pd.IndexSlice

idx = pd.IndexSlice
data_ = data_df.loc['city_2', idx[['person_1', 'person_3'], 'job_1']]
print('Данные по city_2, person_1 и person_3, job_1:')
print(data_)





#4. Привести пример использования inner и outer джойнов для Series (данные примера скорее всего нужно изменить)
# ser1 = pd.Series(['a', 'b', 'c'], index=[1,2,3])
# ser2 = pd.Series(['b', 'c', 'f'], index=[4,5,6])

# print (pd.concat([ser1, ser2], join='outer'))
# print (pd.concat([ser1, ser2], join='inner'))



df1 = pd.DataFrame([['a', 1], ['b', 2]], columns=['letter', 'number'])

df2 = pd.DataFrame([['c', 3, '$'], ['d', 4, '@']], columns=['letter', 'number', 'symbol'])

print(pd.concat([df1, df2], join='inner'))

print(pd.concat([df1, df2], join='outer'))



>>> Output:

 letter  number
0      a       1
1      b       2
0      c       3
1      d       4

letter  number symbol
0      a       1    NaN
1      b       2    NaN
0      c       3      $
1      d       4      @
